[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\layla\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\layla\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 21.0.1)
[debug]       Load.loadUnit: plugins took 54.7269ms
[debug]       Load.loadUnit: defsScala took 0.2411ms
[debug] [Loading] Scanning directory C:\Users\layla\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\layla\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.0599 ms
[debug]           Load.resolveProject(global-plugins) took 31.1093ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\layla\.sbt\1.0\plugins, plugins: List(<none>))) took 56.1896ms
[debug] [Loading] Done in C:\Users\layla\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 74.0452ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1407ms
[debug]     Load.loadUnit(file:/C:/Users/layla/.sbt/1.0/plugins/, ...) took 136.3024ms
[debug]   Load.apply: load took 351.2584ms
[debug]   Load.apply: resolveProjects took 4.1682ms
[debug]   Load.apply: finalTransforms took 53.8547ms
[debug]   Load.apply: config.delegates took 7.1618ms
[debug]   Load.apply: Def.make(settings)... took 332.303ms
[debug]   Load.apply: structureIndex took 82.0132ms
[debug]   Load.apply: mkStreams took 3.2378ms
[info] loading global plugins from C:\Users\layla\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4460.957ms
[debug]           Load.loadUnit: plugins took 20.9703ms
[debug]           Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\layla\IdeaProjects\scala-testing\project
[debug]             Load.loadUnit: mkEval took 4.0465ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\layla\IdeaProjects\scala-testing\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.4197 ms
[info] loading settings for project scala-testing-build from idea.sbt ...
[debug]               Load.resolveProject(scala-testing-build) took 9.0839ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-testing-build, base: C:\Users\layla\IdeaProjects\scala-testing\project, plugins: List(<none>))) took 11.945ms
[debug] [Loading] Done in C:\Users\layla\IdeaProjects\scala-testing\project, returning: (scala-testing-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1784.2977ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.5332ms
[debug]         Load.loadUnit(file:/C:/Users/layla/IdeaProjects/scala-testing/project/, ...) took 1809.3156ms
[debug]       Load.apply: load took 1810.4294ms
[debug]       Load.apply: resolveProjects took 0.0953ms
[debug]       Load.apply: finalTransforms took 7.4247ms
[debug]       Load.apply: config.delegates took 0.2887ms
[debug]       Load.apply: Def.make(settings)... took 55.1392ms
[debug]       Load.apply: structureIndex took 20.8393ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\Users\layla\IdeaProjects\scala-testing\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5437.1588ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\layla\IdeaProjects\scala-testing
[debug]       Load.loadUnit: mkEval took 0.3579ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6294 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 21.9839ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\layla\IdeaProjects\scala-testing, plugins: List(<none>))) took 24.9382ms
[debug] [Loading] Done in C:\Users\layla\IdeaProjects\scala-testing, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1115.6474ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.4796ms
[debug]   Load.loadUnit(file:/C:/Users/layla/IdeaProjects/scala-testing/, ...) took 6563.0976ms
[debug] Load.apply: load took 6564.8275ms
[debug] Load.apply: resolveProjects took 0.1786ms
[debug] Load.apply: finalTransforms took 21.6331ms
[debug] Load.apply: config.delegates took 0.2728ms
[debug] Load.apply: Def.make(settings)... took 44.7778ms
[debug] Load.apply: structureIndex took 23.2668ms
[debug] Load.apply: mkStreams took 0.0086ms
[info] set current project to scala-testing (in build file:/C:/Users/layla/IdeaProjects/scala-testing/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59522 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59522, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala-testing (in build file:/C:/Users/layla/IdeaProjects/scala-testing/)
[debug] > Exec(idea-shell, None, None)
